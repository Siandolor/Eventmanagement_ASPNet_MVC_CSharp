@model Eventmanagement.Models.Events.EventBasics

@{
    ViewData["Title"] = "Veranstaltungsdetails";

    string GetEnumDisplayName<T>(T enumVal) where T : Enum
    {
        var field = enumVal.GetType().GetField(enumVal.ToString());
        var attr = field?.GetCustomAttribute<DisplayAttribute>();
        return attr?.Name ?? enumVal.ToString();
    }
}

<div class="border-1 border-dark rounded-4 shadow-sm p-4 mt-4 mx-auto" style="max-width: 900px;">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="m-0 flex-grow-1 text-center">@ViewData["Title"]</h2>
        <a asp-action="UserDetailsCommon" asp-route-userType="Organizer" asp-route-id="@ViewBag.OrganizerLoginId" class="btn btn-outline-secondary ms-auto">
            Zurück zur Übersicht
        </a>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label class="fw-semibold text-muted">Titel</label>
            <div class="fs-5">@Model.Title</div>
        </div>
        <div class="col-md-6">
            <label class="fw-semibold text-muted">Max. Teilnehmerzahl</label>
            <div class="fs-5">@Model.MaxParticipants</div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12" style="min-height: 100px;">
            <label class="fw-semibold text-muted">Kurzbeschreibung</label>
            <div>@Model.Description</div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-4">
            <label class="fw-semibold text-muted">Kategorie</label>
            <div>@Model.Category</div>
        </div>
        <div class="col-md-4">
            <label class="fw-semibold text-muted">Typ</label>
            <div>@Model.Type</div>
        </div>
        <div class="col-md-4">
            <label class="fw-semibold text-muted">Veranstaltungsort</label>
            <div>@Model.Location?.Location_CompanyName</div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label class="fw-semibold text-muted">Start</label>
            <div>@Model.StartDate.ToShortDateString() @Model.StartTime</div>
        </div>
        <div class="col-md-6">
            <label class="fw-semibold text-muted">Ende</label>
            <div>@Model.EndDate.ToShortDateString() @Model.EndTime</div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <label class="fw-semibold text-muted">Veröffentlicht</label>
            <span class="fs-4 ms-2">@Html.Raw(Model.IsPublished ? "<span class='text-success'>&#10004;</span>" : "<span class='text-danger'>&#10008;</span>")</span>
        </div>
        <div class="col-md-6">
            <label class="fw-semibold text-muted">Ticketverkauf offen</label>
            <span class="fs-4 ms-2">@Html.Raw(Model.TicketSaleOpen ? "<span class='text-success'>&#10004;</span>" : "<span class='text-danger'>&#10008;</span>")</span>
        </div>
    </div>
</div>

<div class="border-1 border-dark rounded-4 shadow-sm p-4 mt-4 mx-auto" style="max-width: 900px;">
    <h4 class="mb-3">Zugewiesene Sitzplätze</h4>
    @{
        var filteredSeats = (ViewBag.SeatUnits as List<Eventmanagement.Models.Events.EventSeatUnit>)
        ?.Where(s => s.Event_Id == Model.Event_Id)
        .ToList();
    }

    @if (filteredSeats != null && filteredSeats.Any())
    {
        var grouped = filteredSeats
        .GroupBy(s => new
        {
            TicketPrice = Math.Round(s.TicketPrice, 2),
            s.Category,
            s.SeatUnit.BlockType,
            s.SeatUnit.BlockName,
            s.SeatUnit.Level,
            s.SeatUnit.IsStandingArea
        })
        .OrderBy(g => g.Key.TicketPrice)
        .ThenBy(g => g.Key.BlockType)
        .ThenBy(g => g.Key.BlockName)
        .ThenBy(g => g.Key.Level);

        <div class="table-responsive">
            <table class="table table-sm align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Preis</th>
                        <th>Kategorie</th>
                        <th>Block</th>
                        <th>Ebene</th>
                        <th>Anzahl Plätze</th>
                        <th>Hinweis</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var group in grouped)
                    {
                        <tr>
                            <td>@group.Key.TicketPrice.ToString("C")</td>
                            <td>@group.Key.Category</td>
                            <td>
                                @(group.Key.BlockType == BlockIdentifier.Unspecified ? "" : GetEnumDisplayName(group.Key.BlockType))
                                @group.Key.BlockName
                            </td>
                            <td>
                                @(group.Key.Level == LevelType.Unspecified ? "" : GetEnumDisplayName(group.Key.Level))
                            </td>
                            <td>@group.Count()</td>
                            <td>
                                @if (group.Key.IsStandingArea)
                                {
                                    <span class="text-danger">Stehplätze</span>
                                }
                                else
                                {
                                    <span class="text-muted">Sitzplätze</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p class="text-muted">Keine Sitzplätze zugewiesen.</p>
    }
</div>

<div class="border-1 border-dark rounded-4 shadow-sm p-4 mt-4 mx-auto" style="max-width: 900px;">
    <h4 class="mb-3">Sessions</h4>
    @{
        var sessions = (ViewBag.Sessions as List<EventSession>)
        ?.Where(s => s.Event_Id == Model.Event_Id)
        .OrderBy(s => s.StartDate)
        .ThenBy(s => s.StartTime)
        .ToList();
    }

    @if (sessions != null && sessions.Any())
    {
        <ul class="list-group list-group-flush">
            @foreach (var s in sessions)
            {
                <li class="list-group-item">
                    <strong>@s.Title</strong><br />
                    <span class="text-muted">@s.StartDate.ToShortDateString() @s.StartTime – @s.EndDate.ToShortDateString() @s.EndTime</span><br />
                    <span class="text-muted">@s.Speaker</span><br />
                    <span>@s.Description</span>
                </li>
            }
        </ul>
    }
    else
    {
        <p class="text-muted">Keine Sessions vorhanden.</p>
    }
</div>

<div class="border-1 border-dark rounded-4 shadow-sm p-4 mt-4 mx-auto" style="max-width: 900px;">
    <h4 class="mb-3">Dateianhänge</h4>
    @{
        var attachments = (ViewBag.Attachments as List<EventAttachment>)
        ?.Where(a => a.Event_Id == Model.Event_Id)
        .OrderByDescending(a => a.UploadedAt)
        .ToList();
    }

    @if (attachments != null && attachments.Any())
    {
        <ul class="list-group list-group-flush">
            @foreach (var a in attachments)
            {
                <li class="list-group-item">
                    📎 <strong>@a.FileName</strong><br />
                    <span class="text-muted">@a.MimeType – Hochgeladen am @a.UploadedAt.ToString("g")</span>
                </li>
            }
        </ul>
    }
    else
    {
        <p class="text-muted">Keine Dateianhänge vorhanden.</p>
    }
</div>
